---
layout: post
section-type: post
title: Tr0ll
category: VulnHub
---
I've decided that 2015 is the year I really jump into security and begin to hone my knowledge by taking on vulnerable virtual machines (vm's), security certificates, and offensive programming. I'm starting off the year by taking on my first boot2root: tr0ll. Having played around with various security tools in the past (nmap, metasploit, etc...) I felt tr0ll would be a great test on what I already know, as well as what I still need to learn and practice.

When booting up tr0ll in VMware Fusion 7, I was presented with a login prompt shown below.

<img src="/img/posts/tr0ll_images/screen-shot-2015-02-24-at-9-47-00-pm.png" alt="Tr0ll login" class="img-responsive"/>

Nothing I can really do here, so I decided to boot up Kali and use arp-scan to find out the ip address of tr0ll. __IMPORTANT:__ Make sure the network adapter is set to NAT on tr0ll so it is allocated an ip addresss through the router's dhcp configuration.

<img src="/img/posts/tr0ll_images/selection_00111.png" alt="Tr0ll arp-scan" class="img-responsive"/>

In this case, tr0ll was given the ip of __192.168.116.150__ (Kali is using 192.168.116.254). From here, I decided to run a scan with nmap to see what services tr0ll was running. Using the command: __nmap -sS -A 192.168.116.150__ I ran a TCP scan (-sS) on what services were running on the machine, as well as OS detection, version detection, script scanning, and traceroute (-A). Results of the scan can be noticed below.

<img src="/img/posts/tr0ll_images/selection_00112.png" alt="Tr0ll nmap scan" class="img-responsive"/>

FTP, SSH, and HTTP were the only 3 services running on the machine. At first glance, two things immediately caught my attention. The first was that anonymous ftp was allowed and the other was a directory on port 80 called /secret. I decided to begin my search on port 80 (http) by browsing to the ip address of the target and seeing what came up.

<img src="/img/posts/tr0ll_images/selection_00113.png" alt="Tr0ll port 80" class="img-responsive"/>

Alright, so doesn't look like anything is here. Lets see what happens when we append /secret to the url.

<img src="/img/posts/tr0ll_images/selection_00114.png" alt="Tr0ll port 80/secret" class="img-responsive"/>

Port 80 isn't looking too good, so I decided to see what I could get from ftp (port 21). Using the command: __ftp 192.168.116.150__ I was asked for a username: __anonymous__ and a password: __guest__ (could have put any password here as anonymous ftp doesn't validate credentials).

I was prompted "Login Successful" and used the __ls__ command to see what was in the directory. The only file that came up was one called __lol.pcap__.This file extension (.pcap) is commonly used for a packet capture file, commonly used by Wireshark. I grabbed the file and booted it up in Wireshark to see what I could find.

<img src="/img/posts/tr0ll_images/selection_00115.png" alt="Tr0ll ftp" class="img-responsive"/>

Following the TCP Stream of the first packet, I was able to quickly recognize that a file called __secret_stuff.txt__ was exchanged.  In order to see what was contained inside of  __secret_stuff.txt__, I filtered out the pcap file using __ftp-data__ in order to rebuild the text file before the exchange.

<img src="/img/posts/tr0ll_images/selection_00116.png" alt="Tr0ll wireshark" class="img-responsive"/>

The first and last packet was the opening and closing of the ftp connection, so I focused my attention on the middle packet to see what was actually transferred.

<img src="/img/posts/tr0ll_images/selection_002.png" alt="tr0ll ftp-data" class="img-responsive"/>

Following the TCP Stream of the packet, I found that __secret_stuff.txt__ contained the following text.

<img src="/img/posts/tr0ll_images/selection_00117.png" alt="tr0ll ftp-data 1" class="img-responsive"/>

Obviously __sup3rs3cr3tdirlol__ stood out right away. Since I was finished with ftp, that meant that it was either going to be used for SSH or possibly HTTP. I decided to try appending __sup3rs3cr3tdirlol__ to the url __192.168.116.150/secret__

<img src="/img/posts/tr0ll_images/selection_00118.png" alt="tr0ll supersecret try1" class="img-responsive"/>

Not what I was looking for, so I decided to remove the __/secret__ from the url to see if __sup3rs3cr3tdirlol__ was it's own parent directory.

<img src="/img/posts/tr0ll_images/selection_00119.png" alt="tr0ll supersecret success" class="img-responsive"/>

Interesting... I grabbed the file to what information I could get from it. A quick __file__ of __roflmao__ told me it was a 32-bit executable. Let's see what results we can get from using the __strings__ command on the executable.

<img src="/img/posts/tr0ll_images/selection_00120.png" alt="tr0ll file command" class="img-responsive"/>

<img src="/img/posts/tr0ll_images/selection_00121.png" alt="tr0ll strings command" class="img-responsive"/>

__"Find address 0x0856BF to proceed"__ Perhaps another directory on port 80?

<img src="/img/posts/tr0ll_images/selection_00122.png" alt="tr0ll proceed to" class="img-responsive"/>

This directory had two folders, one called __good_luck__ and another called
__this_folder_contains_the_password__.
The folder __good_luck__ contained a text file named __which_one_lol.txt__. The text file contained 10 items.

<img src="/img/posts/tr0ll_images/selection_00123.png" alt="tr0ll good_luck" class="img-responsive"/>

The folder
__this_folder_contains_the_password__
had one text file called __Pass.text__. This text file only contained 1 item.

<img src="/img/posts/tr0ll_images/selection_00124.png" alt="tr0ll pass.txt" class="img-responsive"/>

At this point, it became pretty clear that this must be credentials for SSH as that was the only service I had yet to look at on the machine. I grabbed both text files (using __wget__) and decided that I'd use __hydra__ to brute force the SSH connection. I'd use __which_one_lol.txt__ as a username list and __"Good_job_:)"__ as the password.

<img src="/img/posts/tr0ll_images/selection_00125.png" alt="tr0ll ssh" class="img-responsive"/>

Looks like something is preventing us from brute forcing the connection. I looked around online and I think [Fail2Ban](http://en.wikipedia.org/wiki/Fail2ban) may be the culprit here. I tried the various combinations using the usernames and password but nothing worked. I looked back at the directories again and __this_folder_contains_the_password__ caught my eye again. The file it held was __Pass.txt__ so maybe the directory was supposed to be taken literally and __Pass.txt__ was the password. I tried the combinations of usernames but this time used __Pass.txt__ as the password.

<img src="/img/posts/tr0ll_images/selection_00126.png" alt="tr0ll hydra success" class="img-responsive"/>

Success! I pulled up a low privileged bash shell and starting looking around. I found an interesting file in __/opt__ called __lmao.py__ but didn't have the proper permissions to __cat__ the file. However, after a few minutes the connection dropped and I was presented with the following message:

<img src="/img/posts/tr0ll_images/selection_00127.png" alt="tr0ll in ssh" class="img-responsive"/>

I started looking around in various directories and found a __fail2ban__ log in __/var/log__ which confirmed my suspicions that fail2ban was preventing brute forcing of the SSH connection.

<img src="/img/posts/tr0ll_images/selection_00128.png" alt="tr0ll fail2ban log" class="img-responsive"/>

I reconnected and took a look at the root directory and noticed that the __/tmp__ directory had full root access. I knew from past boot2root's that this was not normal and that this configuration was left purposely.

<img src="/img/posts/tr0ll_images/selection_00129.png" alt="tr0ll tmp root access" class="img-responsive"/>

At this point I knew three things:

  1. I had a directory __/tmp__ with full root access

  2. I had a file __lmao.py__ which was definitely important as there's no other reason it would be in the __/opt__ directory.

  3. Finally there was some event causing my SSH connection to drop.

I looked at __/var/log__ and decided to look at the __cronlog__. __Cron__ is a time based scheduler in Unix which can run scripts daily, monthly, etc... and it could be explaining why my SSH connection was dropping after so many minutes. If we look at the __cron__ table below, we can see that __cleaner.py__ is running every 2 minutes.

<img src="/img/posts/tr0ll_images/selection_00130.png" alt="tr0ll cronlog" class="img-responsive"/>

So I needed to find out where this file was so I could examine it. I ran the __find__ command and searched for __cleaner.py__ using the terminal's search function. Using the command __find -name cleaner.py__ I found the file in the directory __/lib/log/cleaner.py__.

<img src="/img/posts/tr0ll_images/selection_00131.png" alt="tr0ll cleaner dir" class="img-responsive"/>

After going to the directory, I noticed that I had permissions to read and write the file.

<img src="/img/posts/tr0ll_images/selection_0021.png" alt="tr0ll cleaner perm" class="img-responsive"/>

After using __cat__ on the file, itc looked like every two minutes, everything in the __/tmp__ was being deleted. However, I quickly saw how I could take advantage of this. Since this file had root privileges, I could rewrite the script to copy a shell to the tmp folder.

<img src="/img/posts/tr0ll_images/selection_00132.png" alt="tr0ll cat cleaner.py" class="img-responsive"/>

Finally, I waited for the cron job to drop the shell into the /tmp directory. I ran the shell script and then used the command __whoami__ and saw that I finally had root.

<img src="/img/posts/tr0ll_images/selection_00133.png" alt="tr0ll whoami" class="img-responsive"/>

A quick __cat__ of __/root/proof.txt__ gave me the proof I needed and my first boot2root was finally completed.

<img src="/img/posts/tr0ll_images/selection_00134.png" alt="tr0ll complete" class="img-responsive"/>

Thank you __Maleus__ for this boot2root. I enjoyed working on it.
